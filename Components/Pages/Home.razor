@page "/"
@rendermode InteractiveServer

@using YTMusicAPI
@using YTMusicAPI.Model
@using YTMusicAPI.Model.Domain
@using YTMusicAPI.Utils
<PageTitle>Music Rat</PageTitle>

<h1>Music Rat</h1>

<input @bind-value="@search" />
<button class="btn btn-primary" @onclick="Search">Search</button>

<div class="tracks-block">
@if (_tracks.Any())
{
    @foreach (var track in _tracks)
    {
        <div class="song" @onclick="@(() => PlayFromList(@track.Url))">
            <img src="@track.Thumbnails.ToList().GetLowest().Url" alt="@track.Title">
            <p>@track.Author - @track.Title </p>
        </div>
    }
}
</div>
<div class="player">
    <div id="progress-bar" cursor: pointer;>
        <div id="progress"></div>
    </div>
    <button id="playBtn" @onclick="PlayOrPause">@(_isAudioPlayed == null ? "▶" : _isAudioPlayed is true ? "⏸︎" : "▶")</button>
</div>
<script>
        window.PlayAudioFileStream = async (url) => {
            
            const audio = document.getElementById("audio");
            if(audio != null) {
                document.body.removeChild(audio);
                URL.revokeObjectURL(url);
            }
            
            var sound = document.createElement('audio');

            const progressBar = document.getElementById('progress');

            sound.addEventListener('timeupdate', function() {
            const currentTime = sound.currentTime;
            const duration = sound.duration;
                const progress = (currentTime / duration) * 100;
                progressBar.style.width = progress + '%';
            });

            progressBar.addEventListener('click',
                function(event) {
                    const rect = progressBar.getBoundingClientRect();
                    const totalWidth = rect.width;
                    const clickX = event.clientX - rect.left;
                    const clickPercentage = (clickX / totalWidth) * 100;

                    sound.currentTime = (clickPercentage / 100) * sound.duration;
                });

            sound.id = "audio";
            sound.src = url;
            sound.type = 'audio/mpeg';
            document.body.appendChild(sound);
            sound.load();
            sound.play();
            sound.onended = function () {
                document.body.removeChild(sound);
                URL.revokeObjectURL(url);
            };
        }

        window.PlayOrPause = async () => {
            
            const audio = document.getElementById("audio");
            if(audio == null) {
                return;
            }

            if (!audio.paused) {
                audio.pause();
            }
            else {
                audio.play();
            }
        };

</script>


@code {
    private TrackClient _trackClient;
    private SearchClient _searchClient;
    private string search;
    private bool? _isAudioPlayed;
    List<Track> _tracks;
    [Inject] private IJSRuntime _js { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _trackClient = new TrackClient();
        _searchClient = new SearchClient();
        _tracks = new List<Track>();
    }

    private async Task PlayFromList(string url)
    {
        _isAudioPlayed = true;
        Track track = await _trackClient.GetTrackInfoAsync(url, CancellationToken.None);
        await _js.InvokeVoidAsync("PlayAudioFileStream", track.Streams.FirstOrDefault()?.Url);

    }

    private async Task PlayOrPause()
    {
        _isAudioPlayed = !_isAudioPlayed;
        await _js.InvokeVoidAsync("PlayOrPause");
    }

    private async Task Search()
    {
        SearchingResult<Track> searchTracksAsync = await _searchClient.SearchTracksAsync(new QueryRequest { Query = search }, CancellationToken.None);
        _tracks = searchTracksAsync.Result.ToList();
    }
}


